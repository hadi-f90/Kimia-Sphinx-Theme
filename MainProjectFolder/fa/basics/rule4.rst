قانون شمارۀ 4
=============

تو درس های قبل برنامه ای طرّاحی کردیم که توی موقعیّت های بیشتر از اون چیزی که در نظر گرفته بودیم کار بکنه (می شد شرایط دیگه ای رو ساخت که برنامه مون اون جاها کار نکنه، ولی... برای این تمرین دیگه همین قدر بس بود).
تا یادم نرفته؛ باید باید همین جا بگم که این برنامه برای این بود که با یک دور گشتن توی محیط، به ریبرگ امکان کاوش اون رو بده. با این که برنامه کوتاه بود و ساختارش می بایست تا این مرحله واضح بوده باشه، هدف این برنامه برای کسی که برای اوّلین بار اون رو بخواد ببینه اون قدرها هم مشخّص نیست. احتمالاً فکر خوبیه که یه چند تا یادداشت استفده کنیم و یا از اسم ها معنادارتری برای تعاریف استفاده کنیم. بگذارید با یادداشت ها شروع کنیم، یه کم بیشتر از اون حدّی که احتملاً فکرش رو می کنیم::


    # با گذاشتن یه نشانه نقطۀ شروع رو علامت می زنیم
    put()

    # یه مسیر خالی پیدا می کنیم و شروع به حرکت می کنیم
    while not front_is_clear():
        turn_left()
    move()

    '''  می دونیم که وقتی که به جایی که نشانه رو گذاشتیم برسیم، یک بار محیط رو دور زدیم.''''

    while not object_here():
        if right_is_clear():  # حرکت از منتی الیه سمت راست
            turn_right()
            move()
        elif front_is_clear():    # دیوار سمت راست تا هر جا ادامه داشت برو .
            move()
        else:
            turn_left()  #  اگه دیوار به سمت چپ ادامه داشت به چپ بچرخ

با این که این طوری منظورمون رو برای هر دستور واضح بیان می کنیم، این کار اون قدرها برای خلاصه کردن روش کار مورد استفاده برای حل مسئله (که به اسم الگوریتم شناخته می شه) مفید نیست. برای همین، این یادداشت ها اون قدری که دلمون می خواد برای یه شخص دیگه - که بخواد کد رو بخونه - ممکنه مفید نباشه.
وقتی یادداشت ها رو بخونیم، متوجّه می شیم که برنامه 2 قسمت داره:

#. مشخّص کردن نقطه ی شروع؛
#. راه رفتن در کنار دیوار سمت راست تا رسیدن به نقطۀ شروع.

بیاید برنامه رو طوری بازنویسی کنیم که این دو تا قسمت مشخّص تر بشن و  یادداشت ها رو هم متفاوت تر بنویسیم::
Let's rewrite this program so that these two parts become clearer,
and writing the comments differently::

    ''' این برنامه به کاری می کنه که ریبرگ دور محیطش بر خلاف جهت عقربه های ساعت بچرخه و وقتی به نقطه ی شروعش برگشت متوقّف بشه. '''

    def mark_starting_point_and_move():
        put()
        while not front_is_clear():
            turn_left()
        move()

    def follow_right_wall():
        if right_is_clear():
            turn_right()
            move()
        elif front_is_clear():
            move()
        else:
            turn_left()


    #######
    ##  پایان تعریف های بالا، اجرای برنامه برنامه از این جا به بعد.
    #######

    mark_starting_point_and_move()

    while not object_here():
        follow_right_wall()

این یکی واضح تر نیست؟

**توجّه: شادی دلتون بخواد یه رونوشت از** ``follow_right_wall()`` **توی کتابخانه تون بگذارید تا وقتی لازم داشتید بتونید  دوباره ازش استفاده کنید.**

نتیجه گیری
-------------

کارمون رو با یک مسئلۀ ساده (دور زدن حول محیط مستطیلی شکل) شروع کردیم و با بهبود کم کم اون ( که به نام اصلاح یا پالایش گام به گام معروفه) تونستیم برنامه ای بنویسیم که می تونست مسئله های بسیار مختلفی رو حل کنه. توی هر گام ما فقط تغییرات کمی رو اعمال کردیم. از طرفی هم قبل از این که مسئله ها و شرایط پیچیده تری رو در نظر بگیریم؛ بررسی کردیم تا خاطر جمع بشیم که راه حلّ مون کار می کنه. همچنین، برای بخش هایی از *الگوریتم* از اسم های آشناتری استفاده کردیم که خوندن و احتمالاً فهمیدن برنامه رو راحت تر می کرد. این کار راهبردی هست که شما بهتره توی نوشتن برنامه های خودتون ازش استفاده کنید:

.. index:: Rule # 4

.. important::

    **قانون شمارۀ 4**
        گام هایی که باید برای نوشتن یک برنامه طی بشه:

        #. ساده شروع کن؛
        #. هر بار فقط یک سری تغییرات کمی رو ایجاد کن،

        #. بررسی کن که تغییراتی که ایجاد کردی کارها و قسمت های قبلی رو از کار ننداخته باشه؛ 

        #. یادداشت های مشروح تری رو که اضافه می کنی طوری نباشند که فقط کار هر دستور رو تکرار می کنند؛ و 

        #. از اسم های آشنا و شناساگر استفاده کن.

دو تا قسمت آخر لزوماً معادل قانون شمارۀ 2 هستند.

حالا، قبلا از این که ادامه بدید و برید درس بعد، برنامه رو امتحان و در صورت لزوم اصلاح کنید تا از کارکردن برنامه ای که توی ویرایشگر مطمئن بشید.