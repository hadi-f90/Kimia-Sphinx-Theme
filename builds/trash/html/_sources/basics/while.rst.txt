برای مدّتی...
===============

.. index:: ! while

وقتی می‌خواهیم دستورهایی را تکرار کنیم تا موقعی که شرط خاصی درست شود؛ پایتون با کلید واژه‌ی whileراه ساده‌تری رو پیش روی ما می گذاره.
مثلاً فرض کنید می خوایم کاری کنیم که ریبرگ تا زمان رسیدن به دیوار به حرکت خودش ادامه بده. قبلاً شاید یه کاری مثل این می کردیم:

.. code-block:: python

    def move_until_wall():
        if front_is_clear():
            move()

    repeat 42:
        move_until_wall()

و امیدوار بودیم که تعداد تکرارها برای رسیدن به دیوار کافی می بود. حالا با اسفتاده از while می تونیم این رو بنویسیم::

    while front_is_clear():
        move()

همین! دیگه نیازی نیست که هی حدس بزنیم و بارها کد رو اجرا کنیم تا ببینیم دفعات تکرار کد کافیه یا نه.

این روندنمای این برنامه ی ساده هست:

.. figure:: ../../flowcharts/while.jpg
   :align: center

چطور فرآیند گزارۀ ``while`` رو بفهمیم؟
-------------------------------------------

این کد رو فرض بگیرید::

    while condition(): #تا موقعی که شرط برقرار هست
        do_1() # کار 1
        do_2() # کار 2 
        do_3() # کار 3

می تونید کد بالا رو معدل این کد در نظر بگیرید::

    if condition(): # اگر شرط برقرار هست
        do_1() # کار 1
        do_2() # کار 2 
        do_3() # کار 3
    if condition(): # اگر شرط برقرار هست
        do_1() # کار 1
        do_2() # کار 2 
        do_3() # کار 3
    if condition(): # اگر شرط برقرار هست
        do_1() # کار 1
        do_2() # کار 2 
        do_3() # کار 3
    if condition(): # اگر شرط برقرار هست
        do_1() # کار 1
        do_2() # کار 2 
        do_3() # کار 3
    ....

که به این معنی هست که تکّه کد تا موقعی که شرط درست (``True``) باشه تکرار می شه. خب، حالا اگه شرط همیشه درست  (``True``)  باشه چی؟ تکّخ کد برای همیشه تکرار می شه و برنامه هیچ وقت تموم نمی شه. 

این خیلی بده.

به جای توصیف این وضعیت به عنوان بندهای تکراری کد، برنامه نویس ها این وضعیّت رو به عنوان **حلقه** توصیف می کنند. یعنی شما با دستور اوّل داخل بند کد شروع می کنید (``do_1()``) و بقیّۀ دستورها رو هم تا موقعی که به دستور آخر (``do_3()``) برسید اجرا می کنید، بعدش برای محک شرط حلقه دوباره برمی گردید به قسمت بررسی شرط قبل از تکّه کد. اگر شرط هنوز برقرار بود یک بار دیگه این تکّه کد داخل حلقه رو تکرار می کنید. اگر شرط حلقه هیچ وقت  ``False`` شما همین طور به تکرار دستورهای داخل حلقه ادامه می دید و به یه **حلقۀ بی پایان** می رسید.

نتیجه گیری: همیشه از این که شرط حلقه یه جایی غلط ``False`` بشه اطمینان حاصل کنید.

بازگشت به مسابقات دو با مانع!
---------------------------------

.. topic:: نوبت شما!

    به  مسئله های **با مانع 1** و **با مانع 2** و ** بامانع 3** برگردید و این بار با ``while``و بدون  ``repeat`` یه برنامه بنویسید که باهر سه تا محیط کار کنه.

.. hint::

    برنامه تون می تونه این شکلی باشه::

       def jump_over_hurdle():
           #تعریف مناسب

       def run_or_jump ():
           # تعریف مناسب

       while not at_goal():
           run_or_jump()

همین! دیگه نیازی به تکرارها بی حساب و کتاب نیست! از این به بعد باید از ``repeat``  **فقط** موقعی استفاده کنید که **دقیقاً** می دونید یه تابع خاص چند دفعه باید تکرار بشه.